QUESTION JAVA : 

Qu'est-ce qu'un type primitif ?
c'est un type de données java dans lequel on stock des information de différentes nature  et qui n'est pas dans un objet ex

Type primitif  | 	                       Signification                                   |      Place occupée en mémoire
byte 	       |      Entier très court allant de -128 à +127 	                           |       1 octet
short 	       |      Entier court allant de -32768 à +32767 	                           |       2 octets
int 	       |      Entier allant de -2 147 483 648 à +2 147 483 647 	                   |       4 octets
long 	       |      Entier long allant de -263 à +263 -1 	                               |       8 octets
float 	       |      Nombre réel allant de -1.4 * 10-45 à +3.4 * 1038 	                   |       4 octets
double 	       |      Nombre réel double précision allant de 4.9 * 10-324 à +1.7 * 10308   |       8 octets
char 	       |      Caractère unicode (65536 caractères possibles) 	                   |       2 octets
boolean 	   |      variable booléenne (valeurs : vrai ou faux) 	                       |       1 octet




Java Concept à assimiler :

Java est un language fortement typé.

=> Grace à la covariance des méthodes, on peut réécrire et donc redéfinir le type de retour d'une méthode du parent. (Avant java 5 cela n'était pas possible)

1 => Variable de classe :
	. Une variable de classe, est une variable DEVANT ÊTRE DECLARE STATIC
	. La methode main doit toujours être déclarée en 'static' (Méthode de clas/zone.jse)
	- Son contenue est commun à toutes les instance de cette classe.

2 => La surcharge de méthode (Method overloading) :
 	. Lorsque l'on veut qu'une méthode puisse fonctionner avec plusieurs types de données (String, int, double,...) on surcharge la méthode.
 	  On change le type, et aussi (si besoin) le nombre des paramètres dans la méthode. Attention, afin que cela puisse fonctionner,
 	  nous ne devons pas modifier le nom de la methode que l'on veut surcharger. Si le nom change alors le principe de surcharge de méthode ne fonctionnera pas.

3 => Le principe d'encapsulation :
	. Si on veut protéger les informations d'un objet contre une modification innatendue, on utilisera le principe d'encapsulation.
	. Les données sont en "private", donc protégées contre les modifications depuis l'extérieur d'une classe.
	. On devra alors utiliser des setteur pour modifier les données.
	. Pour accéder en lecture aux données, alors on utilisera des getter. 
	. L'encapsulation :
		- garantit une meilleure flexibilité du code
		- garantit un meilleur contrôle les données (niveaux d'accès)
		- aide à concevoir des objets immuables
		- permet de mieux gérer les parties du code (améliore aussi la lisibilité du code)

4 => Le principe d'heritage :
	. L'heritage permet à un objet d'avoir les mêmes methodes et attributs qu'un objet parent.
	. Cela évite d'avoir à recoder des methodes générique.
	. Une class fille hérite des même caractéristiques qu'une class mère.
	- Permet de spécialiser une classe. Ajouter ou modifier le comportement d'une classe, étendre son fonctionnement.
	. En Java, l'héritage multiple n'est pas autorisé car il peut y avoir des ambiguités dans les noms de méthode et cela peut faire une pile d'exeption et faire planter l'application.

5 => Le polymorphisme :
	. Ce concept complète celui de l'heritage.
	. Il permet de manipuler des objets sans vraiment connaître leur type.

6 => Le design pattern "decorator" :
	. Utilise des instances d'objets de même supertype dans leur constructeur.
		- Exemple: DataInputStream dis = new DataInputStream(new BufferedInputStream(new FileInputStream(new File("sdz.txt"))));
    . Ajoute de façon dynamique des fonctionnalités à un objet.
    . Permet d'ajouter des fonctionnalités à un objet sans avoir à modifier son code source

 7 => La sérialisation :
 	. En Java, l'action de sauvegarder des objets s'appelle la "sérialisation".
 	. Pour qu'un objet soit sérialisable, il doit implémenter l'interface "Serializable".

 8 => Principe des composants réutilisables (Norme Java Bean):
 	. Consiste à faire de l'encapsulation.

 9 => l'autoboxing :
  	. Les classes appelée Wrapper sont des classes qui englobent les types primitifs
  	. Les classes Wrapper portent le même nom que les types primitifs, mais elle ont une majuscule
  	. Un objet de type wrapper est immuable
  	. L'opération d'englober un types primitif dans un objet Wrapper est nommée "boxing"
  	. L'opération inverse est nommée "unboxing"
  	. Avec le JDK 1.4, l'auto boxing/unboxing ne fonction pas. On doit donc utilisier la méthode valueOf() de la class Wrapper du type primitif en question.
  	. Depuis JDK 1.5, la notion d'auto boxing/unboxing est introduite

 10 => Les mots clès :
 	. Le mot clés "final" :
 		- Devant une variable, il permet à celle-ci de ne pas être modifié. Elle devient une constante.
		- Par convention, le variable constante, doivent être écrite en MAJUSCULE.
		- Les variables préfixé en final doivent forcément être initilisée.

12 => Les Interfaces :
	. Une interface représente la capacité donné à une classes.
	. En règle générale, les interfaces ont un nom qui se termine par "...able". ex : Iterable, Serializable, Appendable, ...

13 => Les différentes collections : 
	. Une collection désigne un ensemble d'éléments sous forme d'objet
	. Une collection ne peut pas contenir de type primitif
	. Une collection ne prend aucune taille
	. List / Set / Queue : qui sont des types de collection, hérites de l'interface "Collection"
	. Depuis Java 5, ont peut désormé préciser le contenue d'une collection

	13.1 => Les "List"
		. C'est une collection qui peut contenir plusieurs fois le même élément
		. Deux façons d'implémenter une List : avec un 'ArrayList() (La classe la plus rapide en régle général)' ou un 'LikedList()'
	13.2 => Mes "Set" 'Des ensembles'
		. C'est une collection qui ne peut pas contenir deux fois le même élément
		. Il existe plusieurs implémentations, la plus courrante c'est le 'HashSet() (La plus performante dans le cas général'$
		. Si on ajout plusieurs fois un même élément, il n'y aura pas d'erreurs à la compilation, l'élément ajouté sera ignoré  mais l'élément ne sera comptabilisé qu'une seule fois
		. Cette collection n'est pas ordonnée
		. Pas de méthode get() (On peut en passant par un tableau en utilisant toArray() qui transforme l'objet en tableau)
		. Position des éléments totalement imprévisible
	13.3 => La "Map"
		. C'est un collection qui reférence chaque élément par une clé.
		. On ne peut pas insérer deux fois la même clé dans une map.
		. On peut insérer deux fois la même valeur
		. L'implémentation la plus courante de Map, est 'HashMap()'
		. Pour ajouter un objet dans une map, on utilise la methode 'put()' qui prend en paramètre la clé et la valeur.
		. En générale, les clés et les valeurs sont du même type lors de l'ajout d'un élément : On évitera d'avoir par exemple un <String, Voiture> Puis <Integer, Voiture> même si c'est possible
		  sans avoir défini au préalable nos type dans l'opérateur diamand.
		. Dans l'opérateur diamand, il faudra préciser deux types, 'le type de la valeur' et 'le type de la clé'
		. Chaque élément d'une map et stocké sous forme d'Objet, qui contiens l'ensemble {clé, valeur}. Le type de cet objet est : "Map.Entry"
		. Entry est une interface interne de Map
		. Pour itérer dans une collection de type Map.Entry, donc dans l'ensemble {clé, valeur}, on utilisera map.EntrySet() (Un ensemble d'entrées).
			- Exemple : 
				Map<String, Voiture> map = new HashMap();
				map.put("bmwi3", bmwi3);

				for (Map.Entry<String, Voiture> entry : map.EntrySet()) {
					String key = entry.getKey();
					Voiture value = entry.getValue();
				}

14 => Swing : Le design pattern observer
		. Ce design pattern répond au besoin de "dialogue" qui peut exister entre différents objets.
		. Notion d'Observation entre deux objets.


15 => Design Pattern : Factory
	. 

16 => Classe abstraite : mot clé 'abstract'
	. Une classe dite abstraite, est une classe qui ne peut pas être instancier.
	. Une classe qui hérite d'une classe abstraite, doit impérativement redéfinir ses méthodes abstraite.



 - Primitive Data Types :
		Data Type  	     Size(bits)	      Range
		byte 	         8            -128..127
		short 	         16	          -32,768..32,767
		int 	         32			  -2,147,483,648.. 2,147,483,647
		long	         64			  -9,223,372,036,854,775,808.. 9,223,372,036,854,775,807
		float 	         32			  3.4e-0.38.. 3.4e+0.38
		double 	         64			  1.7e-308.. 1.7e+308
		char	         16			  Complete Unicode Character Set
		Boolean	         1			  True, False


 - Java Operators
	  Operator Type	    	Operators
		Arithmetic		   	+, – , *, ? , %
		Assignment		   	=, +=, -=, *=, /=, %=, &=, ^=, |=, <<=, >>=, >>>=
		Bitwise				^, &, |
		Logical 			&&, ||
		Relational			<, >, <=, >=,==, !=
		Shift				<<, >>, >>>
		Ternary				?:
		Unary				++x, –x, x++, x–, +x, –x, !, ~


 - Java opérateurs ternaire :
	Exemple :  
		int income = 120_000;
		String className = income > 100_000     ?     "First"       :    "Economy";
						     ||                ||                   ||
					      Condition        Si la condition 	     Sinon on retourne
					      			       est vrais on          la valeur "Economy"
					      			       retourne la 
					      			       valeur "First"

=====================================================================================================================
												JAVA AVANCE
=====================================================================================================================

17 => Classes Internes (Voca : Unité de compilation = fichier .java)
		. Avantage :	- Regrouper logiquement des classes qui sont utilisées qu'à un seul endroit
						- Permet d'accroitre l'encapsulation
						- Produire un code plus lisible et donc plus maintenable

		. Généralités :	- Une classe interne appartient à une instance de sa classe externe, elle ne peut pas définir d'attributs ou de methodes statiques.
						- Une classe interne peut accéder à tous les attributs et méthodes de la classe externe à laquelle elle appartient et inversement.
						- Un classe interne peut avoir n'importe quelle visibilité
		
		. Les classes interne (Inner class) :
			Ce sont des classes définie au sein d'une autre classe
        
        . Les classes locale :
            Une classe locale est une classe interne dont l'implémentation est définie au sein d'un bloc de code.
                Ex :
                    public class LocalCLassExample {
                        private String anAttribute;
                        
                        public Point getPoint(int x, int y) {
                            // Construction de la classe locale grâce au mot clès 'new'.
                            Point p = new Point(x, y) {
                                @Override
                                public double getY() {
                                    return super.getY() + 5;
                                }
                            };
                            
                            return p;
                        }
                    }

		. Nested Class (Class imbriquées) :
			Il y a deux catégories de class impriquée :
				1 => Les Static Nested class (class imbriqué static) :
					C'est une classe définie au sein d'une autre classe en utilisant le mot clef "static"
					Elle peut avoir n'importe quelle visibilité
					Elle ne peut pas accèder aux attributs et méthodes d'instance de sa classe externe
					Elle peut accèder aux méthodes et attributs "STATIQUES" (même privés) de sa classe externe
					La classe externe, peut accéder aux attributs et methodes (même privés) de la classe imbriquée statique
			 
				2 => Les Non-Static Nested class :
					- Parmis le Non-Static Nested class, il existe le Inner Class, Local inner Class, Anonymous Inner class
					- Permet de grouper de façon logique les classes qui sont utilisées seulement à un endroit
					- Augmente l'effet d'encapsulation, et permet d'avoir un code plus lisible et facile à maintenir.
					- La portée d'une classe imbriquée est limitée par la portée de la classe qui l'englobe.
					- Une classe imbriquée a accès aux membres, y compris les membres privés, de la classe dans laquelle elle est imbriquée. L'inverse n'est pas vrais.
		
18 => Redéfinition covariante des méthodes
		. La redéfinition d'une méthode c'est lorsque une méthode d'une classe mère est redéfinie dans une class fille
		. La redéfinition doit forcément avoir la même signature.
		. La surcharge de méthodes (Methode overloading / voir Le point 2) c'est lorsqu'une méthode d'une classe mère est redéfinie dans une classe fille et que ses arguments sont diffèrent des arguments 
		  de la fonction initiale.

19 => Les Enums ou types Enumérés
		. Une Enumération est un groupement logique de constantes (Ex : NORD, SUD, EST, OUEST) dont la valeur, le contenu, n'a que peu d'importance
		. Le mot clès enum, possède le même poids que le mot clef class. Une Enumération peut être déclarer partout
		. De façon implicite, toute Enumération étend la classe java.lang.Enum (il n'est pas nécessaire de le déclarer dans les implémentations) ".... implement Enum"
		. Pour une énumération basique, chaque constante de l'énumération se voit attribuer une valeur ordinale.Le premier élément de l'énumération possède automatiquement l'ordinal 0
		. Dans la pluspart des languages de programmation, les énumeration se limitent à une collection de constantes.
		. En Java, une énumération est un réél objet. Donc il a accès à des méthodes.
		. Une énumération peut donc avoir un ou plusieur constructeurs (toujours privé).
		
		
		
		
		
		

=====================================================================================================================
												HIBERNATE
=====================================================================================================================
- Hibernate à un framework (Open Source) ORM écris en Java gérant la persistance des objets en base de données relationnelle.
- Sous license LGPL (Open Source - Red hat)
- Hibernate apporte une solution aux problèmes d'adaptation entre le paradigme objet et les SGBD en remplaçant
les accès à la base de données par des appels à des méthodes objet de haut niveau. 

Hibernate se rajoute en dépendance dans un projet
- Avant d'utiliser hibernate, il faut le configurer. Pour ce faire, on peut utiliser deux méthode :
- En utilisant du code java;
- Ou en passant par un fichier de configuration (cette méthode rend l'application plus portable)
	Ce fichier doit se trouver à la racine du CLASSPATH de l'appli.
	Dans le dossier resources.
. Le fichier ce nomme hibernate.cfg.xml

=====================================================================================================================
												HIBERNATE 3
=====================================================================================================================
















=====================================================================================================================
												SPRING BOOT
=====================================================================================================================

Site Initializr de Spring boot > start.spring.io > Spring Boot Starters

=========== Programmation par contrat ============== : C'est l'utilisation d'un model de conception (Design pattern) Contract
	. Permet de relacher les contraintes entres les différentes couche logiciel grâce à des interfaces ou parfois des classes abstraites.
	. On passe d'un couplage fort à un couplage faible.

	Java peut instancier des classes à la volé grâce à la reflexivité.


=========== L'injection de dépendance ============== : Permet de valoriser les propriétés de chaques composants, à la volé en passant par les setteurs de ses propriétés.

=========== L'inversion de contrôle (IOC) ============== : C'est le premier principe de Spring, il permet de créer les composants des différentes couches applicative, et de le mettre en relation.

=========== le conteneur léger SPRING ============== : conciste en un fichier de configuration .xml qui permettra à spring d'instancier les bonnes classe, et faire l'inversion de contrôle.

Pour eviter un fichier de configuration .xml trop lourd et trop verbeux (XML Hell) on peut utiliser les annotations java Depuis Spring 2.5. Ces annotations permettent de configurer les applications.

Java config: Il est possible de remplacer le fichier de configuration .xml par une classe de configuration java. Cette classe servira exclusivement pour la configuration de l'application Spring.
	- La classe de configuration doit être annotée @Configuration.
	

