================================================= QUESTION JAVA ========================================================

Qu'est-ce qu'un type primitif ?
    c'est un type de données java dans lequel on stock des information de différentes
    nature et qui n'est pas dans un objet ex

    Type primitif  | 	                       Signification                                   |   Place en mémoire
    byte 	       |      Entier très court allant de -128 à +127 	                           |       1 octet
    short 	       |      Entier court allant de -32768 à +32767 	                           |       2 octets
    int 	       |      Entier allant de -2 147 483 648 à +2 147 483 647 	                   |       4 octets
    long 	       |      Entier long allant de -263 à +263 -1 	                               |       8 octets
    float 	       |      Nombre réel allant de -1.4 * 10-45 à +3.4 * 1038 	                   |       4 octets
    double 	       |      Nombre réel double précision allant de 4.9 * 10-324 à +1.7 * 10308   |       8 octets
    char 	       |      Caractère unicode (65536 caractères possibles) 	                   |       2 octets
    boolean 	   |      variable booléenne (valeurs : vrai ou faux) 	                       |       1 octet

Quel est le but de la méthode : "public static void main(String[] args){}" dans un programme Java ?
    C'est le point d'entrée d'un programme. C'est par cette méthode que le programme démmare.
    
Quelle est la différence entre System.out.println et System.err.println ?
    System.out.println() écrit sur la sortie standard, alors que System.err.println() écrit sur la sortie d'erreur.
    
Qu'est-ce qu'une interface en Java ?
    Une interface represent une capacité que l'on shouaite donner à une classe

Qu'elle est la différence entre une classe abstraite et une interface ?
    - Une classe abstraite est une classe qui ne peut pas être instancié, alors qu'une interface ce n'est pas une classe
    mais un type.
    - Une interface contient uniquement des méthodes abstraites alors qu'une classe abstraite contient au moins
    une méthode abstraite ou + mais peut aussi contenir des méthodes classiques.
    - Une interface ne peut contenir que des methodes public alors qu'une classe abstraite peut avoir des méthodes
    protected ou private.
    
Quand utiliseriez-vous une classe abstraite plutôt qu'une interface ?
    - Généralement, on utilise les classes abstraites quand on sait qu'on aura une relation très forte au niveau
    de nos différentes classes, alors que pour une interface, on a pas vraiment besoin d'une relation forte.
    - On utlisera une interface plutôt qu'une classe abstraite dans le cas ou on voudrai simuler de l'heritage multiple.
     ça evite d'avoir le fameux diamond problem.
    - Aussi on utilise les interfaces quand on veut définir une structure dont on sait qu'elle ne vas pas
    changer beaucoup.

Quelles sont les différences entre une méthode public et une méthode protected ?
    Une méthode "public" est accessible de n'importe où dans le programme, alors que le modificateur de visibilité
    "protected", lui à une portée de classe, et aussi de package.

Qu'est-ce qu'une variable static ?
    Ce sont essentiellement des variables globales - toutes les intances de la classe partage la même variable.
    Ces variables "static", sont aussi accessibles sans forcément créer une instance de l'objet.

Qu'est-ce qu'une exception en Java ?
    Une exception est en générale un événement non souhaité qui interompt le fonctionnement du programme

Qu'est-ce qu'une checkException en Java ?
    C'est une exception que java nous oblige à traiter d'une manière ou d'une autre au moment de la compilation.
    Avant meme que le programme compile, java nous oblige à corriger l'exception.

Qu'est-ce qu'une unCheckedException en Java ?
    C'est une exception que java ne nous oblige pas à traiter et qui ne gène pas au moment de la compilation.
    Toutes les 'unCheckedException' hérite forcément de la classe RuntimeException.

Est-ce une bonne pratique d'attraper une RuntimeException ?
    Oui. De la meme manière qu'une checkedException, c'est une bonne pratique d'attraper une RuntimeException.

Quel est le mot-clé à utiliser dans la signature d'une méthode pour permettre la non-réception d'une exception dans
cette méthode ?
    throws

Quelle est la dernière version de Java ?
    Java 17

Qu'est-ce que le garbage collector en Java et à quoi sert-il ?
    C'est un programme permettant de manager automatiquement la mémoire grace un un thread appelé (GC).
    Il tourne en Background, et gère la mémoire pour nous.

Quelle est la différence entre un HashSet et un TreeSet ?
    Le TreeSet va mettre la list dans un ordre naturel (alphabetique pour des strings) alors que le hashSet met les
    éléments dans n'importe quelle ordre.

Quelle méthode Thread est appelée lorsqu'un thread démarre ?
    C'est la méthode Thread.start();

Est-il possible de mettre à jour un objet String (sans utiliser l'introspection) ?
    Non car l'objet "String" est immuable.

Quel est le contrat entre les méthodes equals et hashcode ?

Qui est James Gosling ?
    c'est le créateur de Java.

Qu'est-ce qu'un POJO en Java
    POJO => Plain Old Java Object
    Pour qu'un Objet soit un POJO, il ne doit pas :
        1 - Etendre aucune autre classe
        2 - Implémenter une interface
        3 - Utiliser des annotations

Qu'elle est la différence en une List et Un Set ?
    La collection 'List' peut contenir deux éléments identiques alors qu'un 'Set' lui ne peut pas.

Qu'est-ce que le pool de String en Java ?
    C'est une sorte de stack créée par Java afin de stocker en mémoire les chaines de caractère pendant toutes la
    durée du programme. Cela permet d'économiser de la mémoire.

Qu'elle est la particularité de l'objet String ?
    L'objet "String" est immuable. Java ne permet pas de changer une String en mémoire car une valeur en mémoire peut
    etre référencé par plusieurs objets String. ex : si on a 10 objet String qui pointe sur une valeur en mémoire dans
    le pool de string, et que cette valeur pouvait etre changée, alors cela changerai la valeur pour les 10 objets
    String qui référence cette addresse en mémoire.

Qu'est-ce que la programmation conccurente ?

Que signifie le mot clé transient ?


Qu'est-ce que la reflexivité

========================================== Java Concept à assimiler ====================================================

=> (public | protected | private) sont des modificateurs de visibilité

=> Les imports static permets de pouvoir utiliser tous les champs statics ou toutes les méthodes static d'une classe
ou d'une interface.

=> Java est un language fortement typé.

=> Grace à la covariance des méthodes, on peut réécrire et donc redéfinir le type de retour d'une méthode du parent.
(Avant java 5 cela n'était pas possible)

=> String immuable :
	. Lorsqu'on change la valeur d'une variable (String name = "foo") ---- (name = "bar") par exemple, la valeur
	en mémoire ne change pas. C'est une nouvelle valeur qui est créée et l'objet 'name' pointe sur cette nouvelle
	addresse en mémoire contenant cette nouvelle valeure. Il y a donc deux address mémoire dansle pool de String
	=> 0x00011 => "foo" et 0x00012 => "bar"
	. Un autre bénéfice des String immuables, c'est qu'ils sont thread safe !!
	. La sécurité est aussi améliorée.

=> Pool de string :
    Java créé ce String pool pour économiser de la mémoire : Si deux variable avec le même
	nom on la même valeur ex : - String name = "Rachid"; && - String anOtherName = "Rachid"; alors java vas créer
	seulement un emplacement en mémoire qui comporte cette valeur et faire pointer name & anOtherName sur la même
	addresse en mémoire contenant la valeur "Rachid". Cela évite de créer deux addresses en mémoire avec la meme valeur;

=> Variable de classe :
	. Une variable de classe, est une variable DEVANT ÊTRE DECLARE STATIC
	. La methode main doit toujours être déclarée en 'static' (Méthode de class)
	- Son contenue est commun à toutes les instance de cette classe.

=> La surcharge de méthode (Method overloading) :
 	. Lorsque l'on veut qu'une méthode puisse fonctionner avec plusieurs types de données (String, int, double,...)
 	on surcharge la méthode. On change le type, et aussi (si besoin) le nombre des paramètres dans la méthode.
 	Attention, afin que cela puisse fonctionner, nous ne devons pas modifier le nom de la methode que
 	l'on veut surcharger. Si le nom change alors le principe de surcharge de méthode ne fonctionnera pas.

3 => Le principe d'encapsulation :
	. Si on veut protéger les informations d'un objet contre une modification innatendue,
	on utilisera le principe d'encapsulation.
	. Les données sont en "private", donc protégées contre les modifications depuis l'extérieur d'une classe.
	. On devra alors utiliser des setteur pour modifier les données.
	. Pour accéder en lecture aux données, alors on utilisera des getter. 
	. L'encapsulation :
		- garantit une meilleure flexibilité du code
		- garantit un meilleur contrôle les données (niveaux d'accès)
		- aide à concevoir des objets immuables
		- permet de mieux gérer les parties du code (améliore aussi la lisibilité du code)

4 => Le principe d'heritage :
	. L'heritage permet à un objet d'avoir les mêmes methodes et attributs qu'un objet parent.
	. Cela évite d'avoir à recoder des methodes générique.
	. Une class fille hérite des même caractéristiques qu'une class mère.
	. Permet de spécialiser une classe. Ajouter ou modifier le comportement d'une classe, étendre son fonctionnement.
	. En Java, l'héritage multiple n'est pas autorisé car il peut y avoir des ambiguités dans les noms de méthode et
	cela peut faire une pile d'exeption et faire planter l'application.
	. Toutes classe que l'on créée hérite forcémenet (implicitement) de la classe Object.
        - Il est interessant de redéfinir la méthode toString() de la classe Object dans nos propre classe.
        - Une bonne pratique serait de toujours redéfinir cette méthode, car elle permet d'obtenir une représentation,
        en chaîne de caractères, de chaque instance de notre classe

5 => Le polymorphisme :
	. Ce concept complète celui de l'heritage.
	. Il permet de manipuler des objets sans vraiment connaître leur type.

6 => Le design pattern "decorator" :
	. Utilise des instances d'objets de même supertype dans leur constructeur.
		- Exemple: DataInputStream dis = new DataInputStream(new BufferedInputStream(new FileInputStream(new File("sdz.txt"))));
    . Ajoute de façon dynamique des fonctionnalités à un objet.
    . Permet d'ajouter des fonctionnalités à un objet sans avoir à modifier son code source

 7 => La sérialisation :
 	. En Java, l'action de sauvegarder des objets s'appelle la "sérialisation".
 	. Pour qu'un objet soit sérialisable, il doit implémenter l'interface "Serializable".

 8 => Principe des composants réutilisables (Norme Java Bean):
 	. Consiste à faire de l'encapsulation.

 9 => l'autoboxing :
  	. Les classes appelée Wrapper sont des classes qui englobent les types primitifs
  	. Les classes Wrapper portent le même nom que les types primitifs, mais elle ont une majuscule
  	. Un objet de type wrapper est immuable
  	. L'opération d'englober un types primitif dans un objet Wrapper est nommée "boxing"
  	. L'opération inverse est nommée "unboxing"
  	. Avec le JDK 1.4, l'auto boxing/unboxing ne fonction pas. On doit donc utilisier la méthode valueOf() de la
  	class Wrapper du type primitif en question.
  	. Depuis JDK 1.5, la notion d'auto boxing/unboxing est introduite

 10 => Les mots clès :
 	. Le mot clés "final" :
 		- Devant une variable, il permet à celle-ci de ne pas être modifié. Elle devient une constante.
		- Par convention, le variable constante, doivent être écrite en MAJUSCULE.
		- Les variables préfixé en final doivent forcément être initilisée.
		le mot clès final : 3 différentes manières de l'utiliser :
    		- Dans un class => public final class Animal : Les autres classes ne pourront pas hériter de la classe Animal
    		- Dans une méthode => public final eat(); : Les classes fille ne peuvent pas Override la methode eat();
    		- Dans une variable => final Dog myDog = new Dog(); : Dans ce cas la variable myDog ne peut pas être
    		changée. Elle est initialisé qu'une seule et unique fois.

12 => Les Interfaces :
	. Une interface représente la capacité donné à une classes.
	. Une interface n'est pas vraiment une classe mais un type.
    . Une interface ne peut avoir que des méthodes public.
	. En règle générale, les interfaces ont un nom qui se termine par "...able".
	ex : Iterable, Serializable, Appendable, ...
	. Maintenant, avec le mot clè default dans une interface, on peut définir une implémentation
	par défaut.

13 => Les différentes collections : 
	. Une collection désigne un ensemble d'éléments sous forme d'objet
	. Une collection ne peut pas contenir de type primitif
	. Une collection ne prend aucune taille
	. List / Set / Queue : qui sont des types de collection, hérites de l'interface "Collection"
	. Depuis Java 5, ont peut désormé préciser le contenue d'une collection

	13.1 => Les "List"
		. C'est une collection qui peut contenir plusieurs fois le même élément
		. Deux façons d'implémenter une List : avec un 'ArrayList() (La classe la plus rapide en régle général)'
		ou un 'LikedList()'
	13.2 => Les "Set" 'Des ensembles'
		. C'est une collection qui ne peut pas contenir deux fois le même élément
		. Il existe plusieurs implémentations, la plus courrante c'est le
		'HashSet() La plus performante dans le cas général'
		. Si on ajout plusieurs fois un même élément, il n'y aura pas d'erreurs à la compilation,
		l'élément ajouté sera ignoré  mais l'élément ne sera comptabilisé qu'une seule fois
		. Cette collection n'est pas ordonnée
		. Pas de méthode get() (On peut en passant par un tableau en utilisant toArray() qui transforme l'objet en tableau)
		. Position des éléments totalement imprévisible
	13.3 => La "Map"
		. C'est un collection qui reférence chaque élément par une clé.
		. On ne peut pas insérer deux fois la même clé dans une map.
		. On peut insérer deux fois la même valeur mais avec une clé différente.
		. L'implémentation la plus courante de Map, est 'HashMap()'
		. Pour ajouter un objet dans une map, on utilise la methode 'put()' qui prend en paramètre la clé et la valeur.
		. En générale, les clés et les valeurs sont du même type lors de l'ajout d'un élément : On évitera d'avoir
		par exemple un <String, Voiture> Puis <Integer, Voiture> même si c'est possible
		  sans avoir défini au préalable nos type dans l'opérateur diamand.
		. Dans l'opérateur diamand, il faudra préciser deux types, 'le type de la valeur' et 'le type de la clé'
		. Chaque élément d'une map et stocké sous forme d'Objet, qui contiens l'ensemble {clé, valeur}.
		Le type de cet objet est : "Map.Entry"
		. Entry est une interface interne de Map
		. Pour itérer dans une collection de type Map.Entry, donc dans l'ensemble {clé, valeur}, on utilisera
		map.EntrySet() (Un ensemble d'entrées).
			- Exemple : 
				Map<String, Voiture> map = new HashMap();
				map.put("bmwi3", bmwi3);

				for (Map.Entry<String, Voiture> entry : map.EntrySet()) {
					String key = entry.getKey();
					Voiture value = entry.getValue();
				}

14 => Swing : Le design pattern observer
		. Ce design pattern répond au besoin de "dialogue" qui peut exister entre différents objets.
		. Notion d'Observation entre deux objets.

15 => Design Pattern : Factory
	. 

16 => Classe abstraite : mot clé 'abstract'
    . Une classe abstraite c'est comme une classe normale, mais avec des méthodes abstraites.
	. Une classe dite abstraite, est une classe qui ne peut pas être instancier.
	. Une classe qui hérite d'une classe abstraite, doit impérativement redéfinir ses méthodes abstraite.

 - Java Operators
	  Operator Type	    	Operators
		Arithmetic		   	+, – , *, ? , %
		Assignment		   	=, +=, -=, *=, /=, %=, &=, ^=, |=, <<=, >>=, >>>=
		Bitwise				^, &, |
		Logical 			&&, ||
		Relational			<, >, <=, >=,==, !=
		Shift				<<, >>, >>>
		Ternary				?:
		Unary				++x, –x, x++, x–, +x, –x, !, ~

 - Java opérateurs ternaire :
	Exemple :  
		int income = 120_000;
		String className = income > 100_000     ?     "First"       :    "Economy";
						     ||                ||                   ||
					      Condition        Si la condition 	     Sinon on retourne
					      			       est vrais on          la valeur "Economy"
					      			       retourne la 
					      			       valeur "First"

=====================================================================================================================
												JAVA AVANCE
=====================================================================================================================

17 => Classes Internes (Voca : Unité de compilation = fichier .java)
		. Avantage :	- Regrouper logiquement des classes qui sont utilisées qu'à un seul endroit
						- Permet d'accroitre l'encapsulation
						- Produire un code plus lisible et donc plus maintenable

		. Généralités :	- Une classe interne appartient à une instance de sa classe externe, elle ne peut pas définir
		                d'attributs ou de methodes statiques.
						- Une classe interne peut accéder à tous les attributs et méthodes de la classe externe
						à laquelle elle appartient et inversement.
						- Un classe interne peut avoir n'importe quelle visibilité
		
		. Les classes interne (Inner class) :
			Ce sont des classes définie au sein d'une autre classe
        
        . Les classes locale :
            Une classe locale est une classe interne dont l'implémentation est définie au sein d'un bloc de code.
                Ex :
                    public class LocalCLassExample {
                        private String anAttribute;
                        
                        public Point getPoint(int x, int y) {
                            // Construction de la classe locale grâce au mot clès 'new'.
                            Point p = new Point(x, y) {
                                @Override
                                public double getY() {
                                    return super.getY() + 5;
                                }
                            };
                            
                            return p;
                        }
                    }

		. Nested Class (Class imbriquées) :
			Il y a deux catégories de class impriquée :
				1 => Les Static Nested class (class imbriqué static) :
					C'est une classe définie au sein d'une autre classe en utilisant le mot clef "static"
					Elle peut avoir n'importe quelle visibilité
					Elle ne peut pas accèder aux attributs et méthodes d'instance de sa classe externe
					Elle peut accèder aux méthodes et attributs "STATIQUES" (même privés) de sa classe externe
					La classe externe, peut accéder aux attributs et methodes (même privés) de la classe imbriquée statique
			 
				2 => Les Non-Static Nested class :
					- Parmis le Non-Static Nested class, il existe le Inner Class, Local inner Class, Anonymous Inner class
					- Permet de grouper de façon logique les classes qui sont utilisées seulement à un endroit
					- Augmente l'effet d'encapsulation, et permet d'avoir un code plus lisible et facile à maintenir.
					- La portée d'une classe imbriquée est limitée par la portée de la classe qui l'englobe.
					- Une classe imbriquée a accès aux membres, y compris les membres privés, de la classe
					dans laquelle elle est imbriquée. L'inverse n'est pas vrais.
		
18 => Redéfinition covariante des méthodes
		. La redéfinition d'une méthode c'est lorsque une méthode d'une classe mère est redéfinie dans une class fille
		. La redéfinition doit forcément avoir la même signature.
		. La surcharge de méthodes (Methode overloading / voir Le point 2) c'est lorsqu'une méthode d'une classe mère
		est redéfinie dans une classe fille et que ses arguments sont diffèrent des arguments de la fonction initiale.

19 => Les Enums ou types Enumérés
		. Une Enumération est un groupement logique de constantes (Ex : NORD, SUD, EST, OUEST) dont la valeur,
		le contenu, n'a que peu d'importance
		. Le mot clès enum, possède le même poids que le mot clef class. Une Enumération peut être déclarer partout
		. De façon implicite, toute Enumération étend la classe java.lang.Enum (il n'est pas nécessaire de le déclarer
		dans les implémentations) ".... implement Enum"
		. Pour une énumération basique, chaque constante de l'énumération se voit attribuer une valeur ordinale.
		Le premier élément de l'énumération possède automatiquement l'ordinal 0
		. Dans la pluspart des languages de programmation, les énumeration se limitent à une collection de constantes.
		. En Java, une énumération est un réél objet. Donc il a accès à des méthodes.
		. Une énumération peut donc avoir un ou plusieur constructeurs (toujours privé).


=====================================================================================================================
												HIBERNATE
=====================================================================================================================
- Hibernate à un framework (Open Source) ORM écris en Java gérant la persistance des objets en base de données relationnelle.
- Sous license LGPL (Open Source - Red hat)
- Hibernate apporte une solution aux problèmes d'adaptation entre le paradigme objet et les SGBD en remplaçant
les accès à la base de données par des appels à des méthodes objet de haut niveau. 

Hibernate se rajoute en dépendance dans un projet
- Avant d'utiliser hibernate, il faut le configurer. Pour ce faire, on peut utiliser deux méthode :
- En utilisant du code java;
- Ou en passant par un fichier de configuration (cette méthode rend l'application plus portable)
	Ce fichier doit se trouver à la racine du CLASSPATH de l'appli.
	Dans le dossier resources.
. Le fichier ce nomme hibernate.cfg.xml

=====================================================================================================================
												HIBERNATE 3
=====================================================================================================================
















========================================================================================================================
												SPRING / SPRING BOOT
========================================================================================================================

Site Initializr de Spring boot > start.spring.io > Spring Boot Starters :
    Permet d'initialiser un projet Spring en choisissant plusieurs options disponibles.

======================================== Programmation par contrat =====================================================
C'est l'utilisation d'un model de conception (Design pattern) Contract
	. Permet de relacher les contraintes entres les différentes couches logiciels grâce à des interfaces
	ou parfois des classes abstraites.
	. On passe d'un couplage fort à un couplage faible.

Java peut instancier des classes à la volé grâce à la reflexivité.

=========================================== L'injection de dépendance ==================================================
Permet de valoriser les propriétés de chaques composants,à la volé en passant par les setteurs de ses propriétés.

============================================ L'inversion de contrôle (IOC) =============================================
C'est le premier principe de Spring, il permet de créer les composants des différentes couches applicative,
et de les mettrent en relation.
C'est du code qui permet d'instancier les composants de l'architechture et les mettrent en relation grâce à
l'injection de dépendance

=========================================== le conteneur léger SPRING ==================================================
conciste en un fichier de configuration .xml "applicationContext.xml" qui permettra à spring
d'instancier les bonnes classe, et faire l'inversion de contrôle. Ce fichier se place dans la classPath dossier
ressources de l'application.

Pour éviter un fichier de configuration .xml trop lourd et trop verbeux (XML Hell) on peut utiliser les annotations
java Depuis Spring 2.5. Ces annotations permettent de configurer les applications.

                                  === Les différentes annotations ===
L'annotation Spring @Autowired => par defaut, fait un autowiring byType.
    - Cela permet de faire une injection de dépendance dans la propriété annotée sans passer par le setter !
    - Cette annotation intervient au niveau du byteCode java, et donc la propriété annotée peut s'affranchir du
    modificateur de visibilité

L'annotation Spring @Value => Inject une valeur à une propriété.
    - Il faut lui donner une valeur entre parenthèse ex @Value("VALEUR") 
    - On peut mettre une clé de valeur en utilisant @Value("${toto.value}")

L'annotation Spring @Component => Permet d'indiquer à spring que la class annotée est un composant à instancier.
    - C'est une annotation générique
    - Il existe des annotations filles permettant de stéréotyper les composants :
        . @Controller => indique à Spring que le composant est de type controller
        . @Service => indique à Spring que le composant est de type Service
        . @Repository => indique à Spring que le composant est de type Repository

L'annotation @SpringBootApplication => Elle permet d'indiquer la classe de démarrage (executable).
    - Elle comprends entre autre, les annotations:
        . @ComponentScan => Spring vas rechercher dans les packages de l'application toute les classes 'Composant'
        annotées @Component ou stéréotypées '[@Controller / @Service / @Repository]'
        . @EnableAutoConfiguration => Spring vas rechecher dans toutes les librairies du projet,
        certaines classe annotées @Configuration.
        . @Configuration => Permet d'indiquer que la classe annoté est une classe dans laquel il y a une configuration.

L'annotation @RequestMapping => Permet de mapper les requêtes (requests) aux méthodes des controllers.
    - Elle peut-être utilisé au niveau 'class' pour spécifier un mapping commun à toute la classe
    - Elle peut-être utilisé de façon plus spécifique au niveau d'une méhtode.

L'annotation @RestController => Lorsque dans une classe, toutes les méthodes sont dédiées aux échanges REST,
    Il n'est pas necessaire d'annoter les méthondes avec le @ResponseBody. On peut directement annoter la
    class avec un @RestController  

                                  === Java config ===
Il est possible de remplacer le fichier de configuration .xml par une classe de configuration java.
Cette classe servira exclusivement pour la configuration de l'application Spring.
	- La classe de configuration doit être annotée @Configuration.
	- @PropertySource permet de definir l'emplacement du fichier de properties

                                  === Design pattern IMMUTABLES ===
 - Nomalement dans nos composants, on a des setters et de getter pour suivre la norme java bean (controversé à ce jour),
 mais dans un soucis de sécurité, et pour répondre au design pattern IMMUTABLES, on retirera les setters, notre
 composant devient alors immutable (on ne pourra plus facilement changer ses propriétés
 durant l'exécution de l'application).
 - Le design pattern IMMUTABLES impose cependant que les propriétés des composants soit obligatoirement valorisées.
 - Il faudra donc marquer les propriétés en 'final' et les valoriser à la construction de l'objet.
 - Il faut donc créer un constructeur qui reçoit en paramètre toutes les dépendances à injecter.
 - l'avantage aussi s'est qu'on évite les NPE.
 - l'application ne pourra démarrer que si toutes les dépendances sont satisfaites.
 - De ce fait l'annotation @Autowired n'est plus nécessaire, car l'injection ne se fait plus par la propriété, mais par
 le constructeur.

                                  === Spring MVC ===
- C'est un framework web MVC. Smillaire à Struts ou encore JSF (Java Server Faces). Il s'implémente coté serveur.
- Spring MVC fait appel à un controleur frontal qui va attraper toutes les requêtes HTTP. Il s'agit d'une servlet.
C'est la class "DispatcherServlet"
- Le Backing Bean c'est une notion du framework MVC : Il s'agit de créer une classe permettant de collecter les
informations du front office (forms, ets...);

========================================================================================================================
												SPRING DATA
========================================================================================================================

=========================================== JDBC =======================================================================
 JDBC API : Librairie utilisé pour la connection aux base de données.

=========================================== Hibernate ==================================================================
ORM : Implémentation de JPA
=========================================== JPA ========================================================================